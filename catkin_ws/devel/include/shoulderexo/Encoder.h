// Generated by gencpp from file shoulderexo/Encoder.msg
// DO NOT EDIT!


#ifndef SHOULDEREXO_MESSAGE_ENCODER_H
#define SHOULDEREXO_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shoulderexo
{
template <class ContainerAllocator>
struct Encoder_
{
  typedef Encoder_<ContainerAllocator> Type;

  Encoder_()
    : encoder1(0.0)
    , encoder2(0.0)
    , port_num(0)  {
    }
  Encoder_(const ContainerAllocator& _alloc)
    : encoder1(0.0)
    , encoder2(0.0)
    , port_num(0)  {
  (void)_alloc;
    }



   typedef float _encoder1_type;
  _encoder1_type encoder1;

   typedef float _encoder2_type;
  _encoder2_type encoder2;

   typedef int32_t _port_num_type;
  _port_num_type port_num;





  typedef boost::shared_ptr< ::shoulderexo::Encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shoulderexo::Encoder_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_

typedef ::shoulderexo::Encoder_<std::allocator<void> > Encoder;

typedef boost::shared_ptr< ::shoulderexo::Encoder > EncoderPtr;
typedef boost::shared_ptr< ::shoulderexo::Encoder const> EncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shoulderexo::Encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shoulderexo::Encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shoulderexo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'shoulderexo': ['/home/jackho/ROS_FRAME_FOR_EXO/catkin_ws/src/shoulderexo/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shoulderexo::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shoulderexo::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shoulderexo::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shoulderexo::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shoulderexo::Encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shoulderexo::Encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shoulderexo::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87b6536489d17685402d604f766db88a";
  }

  static const char* value(const ::shoulderexo::Encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87b6536489d17685ULL;
  static const uint64_t static_value2 = 0x402d604f766db88aULL;
};

template<class ContainerAllocator>
struct DataType< ::shoulderexo::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shoulderexo/Encoder";
  }

  static const char* value(const ::shoulderexo::Encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shoulderexo::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 encoder1\n\
float32 encoder2\n\
int32 port_num\n\
";
  }

  static const char* value(const ::shoulderexo::Encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shoulderexo::Encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoder1);
      stream.next(m.encoder2);
      stream.next(m.port_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shoulderexo::Encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shoulderexo::Encoder_<ContainerAllocator>& v)
  {
    s << indent << "encoder1: ";
    Printer<float>::stream(s, indent + "  ", v.encoder1);
    s << indent << "encoder2: ";
    Printer<float>::stream(s, indent + "  ", v.encoder2);
    s << indent << "port_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.port_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHOULDEREXO_MESSAGE_ENCODER_H
