// Generated by gencpp from file exosystem/Sysstatus.msg
// DO NOT EDIT!


#ifndef EXOSYSTEM_MESSAGE_SYSSTATUS_H
#define EXOSYSTEM_MESSAGE_SYSSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exosystem
{
template <class ContainerAllocator>
struct Sysstatus_
{
  typedef Sysstatus_<ContainerAllocator> Type;

  Sysstatus_()
    : record_flag(0)
    , theta_m1(0.0)
    , theta_l1(0.0)
    , delta_theta_r1(0.0)
    , Trr_ad(0.0)
    , theta_m2(0.0)
    , theta_l2(0.0)
    , delta_theta_r2(0.0)
    , Trr_cf(0.0)  {
    }
  Sysstatus_(const ContainerAllocator& _alloc)
    : record_flag(0)
    , theta_m1(0.0)
    , theta_l1(0.0)
    , delta_theta_r1(0.0)
    , Trr_ad(0.0)
    , theta_m2(0.0)
    , theta_l2(0.0)
    , delta_theta_r2(0.0)
    , Trr_cf(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _record_flag_type;
  _record_flag_type record_flag;

   typedef float _theta_m1_type;
  _theta_m1_type theta_m1;

   typedef float _theta_l1_type;
  _theta_l1_type theta_l1;

   typedef float _delta_theta_r1_type;
  _delta_theta_r1_type delta_theta_r1;

   typedef float _Trr_ad_type;
  _Trr_ad_type Trr_ad;

   typedef float _theta_m2_type;
  _theta_m2_type theta_m2;

   typedef float _theta_l2_type;
  _theta_l2_type theta_l2;

   typedef float _delta_theta_r2_type;
  _delta_theta_r2_type delta_theta_r2;

   typedef float _Trr_cf_type;
  _Trr_cf_type Trr_cf;





  typedef boost::shared_ptr< ::exosystem::Sysstatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exosystem::Sysstatus_<ContainerAllocator> const> ConstPtr;

}; // struct Sysstatus_

typedef ::exosystem::Sysstatus_<std::allocator<void> > Sysstatus;

typedef boost::shared_ptr< ::exosystem::Sysstatus > SysstatusPtr;
typedef boost::shared_ptr< ::exosystem::Sysstatus const> SysstatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exosystem::Sysstatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exosystem::Sysstatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exosystem

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'HasHeader': False, 'IsFixedSize': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'exosystem': ['/home/jackho/ROS_FRAME_FOR_EXO/catkin_ws/src/exosystem/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::exosystem::Sysstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exosystem::Sysstatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exosystem::Sysstatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exosystem::Sysstatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exosystem::Sysstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exosystem::Sysstatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exosystem::Sysstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a24a13feba27c82997977933cd4b8af4";
  }

  static const char* value(const ::exosystem::Sysstatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa24a13feba27c829ULL;
  static const uint64_t static_value2 = 0x97977933cd4b8af4ULL;
};

template<class ContainerAllocator>
struct DataType< ::exosystem::Sysstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exosystem/Sysstatus";
  }

  static const char* value(const ::exosystem::Sysstatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exosystem::Sysstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 record_flag\n\
float32 theta_m1\n\
float32 theta_l1\n\
float32 delta_theta_r1\n\
float32 Trr_ad\n\
float32 theta_m2\n\
float32 theta_l2\n\
float32 delta_theta_r2\n\
float32 Trr_cf\n\
";
  }

  static const char* value(const ::exosystem::Sysstatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exosystem::Sysstatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.record_flag);
      stream.next(m.theta_m1);
      stream.next(m.theta_l1);
      stream.next(m.delta_theta_r1);
      stream.next(m.Trr_ad);
      stream.next(m.theta_m2);
      stream.next(m.theta_l2);
      stream.next(m.delta_theta_r2);
      stream.next(m.Trr_cf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sysstatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exosystem::Sysstatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exosystem::Sysstatus_<ContainerAllocator>& v)
  {
    s << indent << "record_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.record_flag);
    s << indent << "theta_m1: ";
    Printer<float>::stream(s, indent + "  ", v.theta_m1);
    s << indent << "theta_l1: ";
    Printer<float>::stream(s, indent + "  ", v.theta_l1);
    s << indent << "delta_theta_r1: ";
    Printer<float>::stream(s, indent + "  ", v.delta_theta_r1);
    s << indent << "Trr_ad: ";
    Printer<float>::stream(s, indent + "  ", v.Trr_ad);
    s << indent << "theta_m2: ";
    Printer<float>::stream(s, indent + "  ", v.theta_m2);
    s << indent << "theta_l2: ";
    Printer<float>::stream(s, indent + "  ", v.theta_l2);
    s << indent << "delta_theta_r2: ";
    Printer<float>::stream(s, indent + "  ", v.delta_theta_r2);
    s << indent << "Trr_cf: ";
    Printer<float>::stream(s, indent + "  ", v.Trr_cf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXOSYSTEM_MESSAGE_SYSSTATUS_H
