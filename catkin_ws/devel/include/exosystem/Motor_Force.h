// Generated by gencpp from file exosystem/Motor_Force.msg
// DO NOT EDIT!


#ifndef EXOSYSTEM_MESSAGE_MOTOR_FORCE_H
#define EXOSYSTEM_MESSAGE_MOTOR_FORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exosystem
{
template <class ContainerAllocator>
struct Motor_Force_
{
  typedef Motor_Force_<ContainerAllocator> Type;

  Motor_Force_()
    : motor1_force(0.0)
    , motor2_force(0.0)  {
    }
  Motor_Force_(const ContainerAllocator& _alloc)
    : motor1_force(0.0)
    , motor2_force(0.0)  {
  (void)_alloc;
    }



   typedef float _motor1_force_type;
  _motor1_force_type motor1_force;

   typedef float _motor2_force_type;
  _motor2_force_type motor2_force;





  typedef boost::shared_ptr< ::exosystem::Motor_Force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exosystem::Motor_Force_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_Force_

typedef ::exosystem::Motor_Force_<std::allocator<void> > Motor_Force;

typedef boost::shared_ptr< ::exosystem::Motor_Force > Motor_ForcePtr;
typedef boost::shared_ptr< ::exosystem::Motor_Force const> Motor_ForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exosystem::Motor_Force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exosystem::Motor_Force_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exosystem

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': False, 'IsFixedSize': True, 'IsMessage': True}
// {'exosystem': ['/home/jackho/ROS_FRAME_FOR_EXO/catkin_ws/src/exosystem/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::exosystem::Motor_Force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exosystem::Motor_Force_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exosystem::Motor_Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exosystem::Motor_Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exosystem::Motor_Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exosystem::Motor_Force_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exosystem::Motor_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dce6fb85721e943607acc3d3dab6c114";
  }

  static const char* value(const ::exosystem::Motor_Force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdce6fb85721e9436ULL;
  static const uint64_t static_value2 = 0x07acc3d3dab6c114ULL;
};

template<class ContainerAllocator>
struct DataType< ::exosystem::Motor_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exosystem/Motor_Force";
  }

  static const char* value(const ::exosystem::Motor_Force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exosystem::Motor_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 motor1_force\n\
float32 motor2_force\n\
";
  }

  static const char* value(const ::exosystem::Motor_Force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exosystem::Motor_Force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor1_force);
      stream.next(m.motor2_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_Force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exosystem::Motor_Force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exosystem::Motor_Force_<ContainerAllocator>& v)
  {
    s << indent << "motor1_force: ";
    Printer<float>::stream(s, indent + "  ", v.motor1_force);
    s << indent << "motor2_force: ";
    Printer<float>::stream(s, indent + "  ", v.motor2_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXOSYSTEM_MESSAGE_MOTOR_FORCE_H
